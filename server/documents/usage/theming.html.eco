---
layout      : 'default'
css         : 'theming'
standalone  : true
order       : 2

title       : 'Theming'
description : 'An introduction to theming'
type        : 'Usage'
---

<%- @partial('header') %>

<script src="/javascript/theming.js"></script>

<link rel="stylesheet/less" type="text/css" href="/src/definitions/globals/site.less" />
<link rel="stylesheet/less" type="text/css" href="/src/definitions/elements/button.less" />

<div class="main ui intro container">

  <h2 class="ui dividing header">
    Preface
  </h2>

  <div class="no example">
    <h4>Progressive Truthfulnesss</h4>
    <blockquote>
      <p>[Progressive truthfulness] is perhaps a better way to build models of physical objects...Start with a model that is fully detailed but only resembles what is wanted. Then, one adjusts one attribute after another, bringing the result ever closer to the mental vision of the new creation, or to the real properties of a real-world object</p>
      <p>...Starting with exemplars that themselves have consistency of style ensures that such consistency is the designer's to lose.</p>
      <span class="author">Frederick Brooks - <a href="http://www.amazon.com/The-Design-Essays-Computer-Scientist/dp/0201362988" target="_blank">The Design of Design</a><span>
    </blockquote>
    <p>Components in Semantic UI are designed to help developers adhere to <a href="https://books.google.com/books?id=0qG4TQi-e-4C&pg=PT234&lpg=PT234&dq=%22progressive+truthfulness%22+frederick+brooks&source=bl&ots=yrjNc6wnz8&sig=PJoYODuRku2A1kBoFOPfn4iGYnc&hl=en&sa=X&ved=0CCIQ6AEwAGoVChMImdSMpIOVxgIVCx-sCh3EQgBu#v=onepage&q=%22progressive%20truthfulness%22%20frederick%20brooks&f=false" target="_blank">progressive truthfulness</a> in their development.</p>
    <p>The default theme uses greyscale colors, and a legible, open source sans-serif font <a href="http://www.latofonts.com"><code>Lato</code></a>, to help give developers a neutral jumping off point to begin defining their own style.</p>

    <p>Instead of having to create components from a blank canvas, developers using Semantic UI only need to specify how their components should differ from the default theme using <a href="http://lesscss.org/features/#variables-feature" target="_blank">CSS variables</a>.</p>
  </div>

  <h2 class="ui dividing header">
    Themes
  </h2>
  <div class="no example">
    <h3 class="ui header">Parts of a Theme</h3>

    <p>Themes are made up of two files a <code>.variables</code> file and a <code>.overrides</code> file.</p>

    <p>A <b>.variables</b> file specifies variables which should be adjusted for a theme.</p>

    <p>An <b>.overrides</b> file adds additional css rules from the baseline definition which should be included with an element. This file also has access to all inherited variables for a component.</p>
  </div>

  <div class="no example">
    <h4 class="ui header">Inheritance</h4>
    <p>Theming variables contain three separate levels of inheritance.</p>
    <p>Each step represents a different level of permanence for a variable.</p>
    <div class="ui fluid steps">
      <div class="step">
        <i class="lock icon"></i>
        <div class="content">
          <div class="title">Defaults</div>
          <div class="description">UI Defaults</div>
        </div>
      </div>
      <div class="step">
        <i class="download icon"></i>
        <div class="content">
          <div class="title">Packaged Theme</div>
          <div class="description">Packagable Component</div>
        </div>
      </div>
      <div class="step">
        <i class="user icon"></i>
        <div class="content">
          <div class="title">Site Theme</div>
          <div class="description">Per-Site Changes</div>
        </div>
      </div>
    </div>
  </div>


  <h2 class="ui dividing header">
    Examples
  </h2>
  <div class="no example">
    <h4>A Simple Example</h4>

    <p>Semantic UI includes thirteen named colors. Components with <code>color variations</code> inherit these global variables when defining how colors should appear.</p>

    <p>Most websites will use a different definition of how these colors should appear. Each theme includes a global file <code>site.variables</code> which can be used to define global variables that each component can use or extend.</p>

    <div class="ui ignored code" data-type="less" data-less="true" data-title="site/globals/site.variables">
    @primaryColor: @pink;
    @secondaryColor: @grey;
    @red    : #B03060;
    @orange : #FE9A76;
    @yellow : #FFD700;
    @olive  : #32CD32;
    @green  : #016936;
    @teal   : #008080;
    @blue   : #0E6EB8;
    @violet : #EE82EE;
    @purple : #B413EC;
    @pink   : #FF1493;
    @brown  : #A52A2A;
    @grey   : #A0A0A0;
    @black  : #000000;
    </div>

    <button class="ui primary button">
      Primary Button
    </button>
    <button class="ui secondary button">
      Secondary Button
    </button>
    <div class="ui horizontal divider">All Colors</div>
    <button class="ui red button">Red</button>
    <button class="ui orange button">Orange</button>
    <button class="ui yellow button">Yellow</button>
    <button class="ui olive button">Olive</button>
    <button class="ui green button">Green</button>
    <button class="ui teal button">Teal</button>
    <button class="ui blue button">Blue</button>
    <button class="ui violet button">Violet</button>
    <button class="ui purple button">Purple</button>
    <button class="ui pink button">Pink</button>
    <button class="ui brown button">Brown</button>
    <button class="ui grey button">Grey</button>
    <button class="ui black button">Black</button>
  </div>

</div>